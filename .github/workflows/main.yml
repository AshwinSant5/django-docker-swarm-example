name: CI/CD

on:
  push:
    branches: '**'

env:
  IMAGE_ROOT: docker.pkg.github.com/${{ github.repository }}
  STACK_NAME: django-swarm-example

jobs:
  checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint
        run: black --check .
      - name: Tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: python manage.py test --settings=app.settings.ci

  build:
    runs-on: ubuntu-latest
    needs: [checks]
    if: github.ref == 'refs/heads/master'
    outputs:
      GITHUB_SHA_SHORT: ${{ steps.sha7.outputs.GITHUB_SHA_SHORT }}

    steps:
      - uses: actions/checkout@v2
      - name: Get short SHA
        id: sha7
        run: |
          echo "::set-env name=GITHUB_SHA_SHORT::$(echo ${{ github.sha }} | cut -c1-7)"
          echo "::set-output name=GITHUB_SHA_SHORT::$(echo ${{ github.sha }} | cut -c1-7)"
      - name: Build image
        run: docker-compose -f deployment/docker-compose.ci.yml build
      - name: Authenticate Docker with GitHub Packages
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: docker-compose -f deployment/docker-compose.ci.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: [checks, build]
    if: github.ref == 'refs/heads/master'
    defaults:
      run:
        working-directory: deployment

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        working-directory: app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Collect static
        working-directory: app
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: python manage.py collectstatic
      - name: Set environment variables in .env
        run: |
          echo 'DEBUG=0' >> .env
          echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env
          echo 'DB_NAME=${{ secrets.DB_NAME }}' >> .env
          echo 'DB_USER=${{ secrets.DB_USER }}' >> .env
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
          echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
          echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env
      - name: Substitute variables in compose file
        run: |
          cp docker-compose.prod.yml docker-compose.prod.tmp.yml
          cat docker-compose.prod.tmp.yml \
            | sed "s,{{IMAGE_ROOT}},${{ env.IMAGE_ROOT }},g" \
            | sed "s,{{GITHUB_SHA_SHORT}},${{ needs.build.outputs.GITHUB_SHA_SHORT }},g" \
            > docker-compose.prod.yml
      - name: Transfer static files to the Swarm manager
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.SWARM_MANAGER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          overwrite: true
          # scp-action doesn't obey working-directory, runs at repo root
          source: "app/static/"
          target: "/usr/src/${{ github.repository }}"
          strip_components: 1
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa ${{ secrets.SWARM_MANAGER_IP }} >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Bring up deployment
        env:
          DOCKER_HOST: ssh://${{ secrets.SSH_USER }}@${{ secrets.SWARM_MANAGER_IP }}
        run: |
          curl -s https://raw.githubusercontent.com/sudo-bmitch/docker-stack-wait/main/docker-stack-wait.sh \
            -o docker-stack-wait.sh
          chmod +x docker-stack-wait.sh

          echo "Logging in to GitHub packages..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

          echo "Bringing up deployment..."
          docker stack deploy --with-registry-auth -c docker-compose.prod.yml ${{ env.STACK_NAME }}

          echo "Waiting for deployment..."
          sleep 30
          ./docker-stack-wait.sh -t 300 ${{ env.STACK_NAME }}

          echo "Running migrations..."
          # Get the host of a node that's running the service
          nodeId=$(docker service ps ${{ env.STACK_NAME }}_django -f "desired-state=running" --format={{.Node}})
          nodeHost=$(docker node inspect $nodeId --format={{.Status.Addr}})

          export DOCKER_HOST=ssh://${{ secrets.REMOTE_USER }}@$nodeHost
          service_id=$(docker ps -f "name=${stack_name}_django" -q | head -n1)
          docker exec $service_id python manage.py migrate
