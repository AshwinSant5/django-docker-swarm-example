name: CI/CD

on:
  push:
    branches: '**'

env:
  IMAGE_ROOT: docker.pkg.github.com/${{ github.repository }}
  STACK_NAME: django-swarm-example

jobs:
  checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint
        run: black --check .
      - name: Tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: python manage.py test --settings=app.settings.ci

  build:
    runs-on: ubuntu-latest
    needs: [checks]
    if: github.ref == 'refs/heads/master'
    outputs:
      sha7: ${{ steps.sha7.outputs.github_sha_short }}

    steps:
      - uses: actions/checkout@v2
      - name: Get short SHA
        id: sha7
        run: |
          echo "::set-env name=GITHUB_SHA_SHORT::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=github_sha_short::${{ env.GITHUB_SHA_SHORT }}"
      - name: Build image
        run: docker-compose -f deployment/docker-compose.ci.yml build
      - name: Authenticate Docker with GitHub Packages
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${GITHUB_ACTOR} --password-stdin
      - name: Push image
        run: docker-compose -f deployment/docker-compose.ci.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: [checks, build]
    if: github.ref == 'refs/heads/master'
    defaults:
      run:
        working-directory: deployment
    env:
      GITHUB_SHA_SHORT: ${{ needs.build.outputs.sha7 }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        working-directory: app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Collect static
        working-directory: app
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: python manage.py collectstatic
      - name: Set environment variables in .env
        run: |
          echo 'DEBUG=0' >> .env
          echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env
          echo 'DB_NAME=${{ secrets.DB_NAME }}' >> .env
          echo 'DB_USER=${{ secrets.DB_USER }}' >> .env
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
          echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
          echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env
      - name: Substitute variables in compose file
        run: |
          cp docker-compose.prod.yml docker-compose.prod.tmp.yml
          cat docker-compose.prod.tmp.yml \
            | sed "s,{{IMAGE_ROOT}},${IMAGE_ROOT},g" \
            | sed "s,{{GITHUB_SHA_SHORT}},${GITHUB_SHA_SHORT},g" \
            > docker-compose.prod.yml
      - name: Transfer deployment and static files to the Swarm manager
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.SWARM_MANAGER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          overwrite: true
          # scp-action doesn't obey working-directory, runs at repo root
          source: "deployment/.env,deployment/docker-compose.prod.yml,app/static/"
          target: "/usr/src/${{ github.repository }}"
          strip_components: 1
      - name: Bring up deployment
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SWARM_MANAGER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: GITHUB_ACTOR,STACK_NAME
          script: |
            cd /usr/src/${{ github.repository }}
            printenv > env.txt
            echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${GITHUB_ACTOR} --password-stdin
            docker stack deploy --with-registry-auth -c docker-compose.prod.yml ${STACK_NAME}
            docker logout docker.pkg.github.com